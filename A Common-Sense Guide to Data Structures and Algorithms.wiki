--------------------------------------------------------------------------------
Notes to 'A Common-Sense Guide to Data Structures and Algorithms'
          - Jay Wengrow
--------------------------------------------------------------------------------
== Data Structures ==
--------------------------------------------------------------------------------
The four ways most data      |  (RSID) Read, Search, Insert, Delete
structures are used          | 
                             | * Read: obtaining the value from a particular 
                             |   location within a data structure 
                             |
                             | * Search: looking for a particular value within a 
                             |   data structure
                             |
                             | * Insert: adding anther value to a particular 
                             |   data structure
                             |
                             | * Delete: removing a value from a data structure
                             |
Algorithmic anylization      | 
terms                        |
                             |
  Time Complexity            | the amount of steps an operation takes
                             |
                             |
                             |
Array                        | * a list of data elements
                             | * elements are identifiable by their index, the 
                             | * First element is identified by index 0, each 
                             |   prceding element's index is incresed by 1
                             |
                             | Unsorted array: RSID time Comlexity
                             |  * Read: O(1)
                             |  * Search: (linear search) O(N)
                             |  * Insert: 
                             |      at the end (push) O(1)
                             |      at the begining (unshift) o(N) + 1 (o(N)
                             |          (insert at the beginning, shift all
                             |          other elements)
                             |  * Delete:
                             |    * Best case: O(1) - (last elemment)
                             |    * Worst case: O(N) - the deletion (1 step)
                             |           shifting all other elements (N - 1)
                             |
Set                          | * A data structure that does not allow duplicate
                             |   data to be contained with it
                             |
                             | Array Based set: RSID time complexity
                             |  * Read: O(1) - same as array
                             |  * Search: O(n)
                             |  * Insert: (every insert requires a seach to 
                             |            check for duplicate values)
                             |    Best case: add to end O(N) + 1 (search and insert)
                             |    Worst case: add to start O(N**2) + 1
                             |    (search, shift N, insert)
                             |  * Delete - same as array
--------------------------------------------------------------------------------
== Algorithms ==
=== Search ===               |
  Linear Search              | Search the elements of an array until a condition 
                             | is meet or there are no more elements in the 
                             | array. Time Complexity: O(N)
                             |
  Binary Search              | Time Complexity: O(log N) j
                             |
-----------------------------|
=== Sort ===                 |
  Bubble Sort                |  1. choose first item in array
                             |  2. compare chosen value with preceeding value
                             |  3. if first chosen is larger than second, swap
                             |  4. select next value after preceeding chosen one
                             |     repeat step 2 until there are no mor values in array
                             |  5. Reapt from step one until there are no swaps
                             |
                             |  Time complexity: O(N**2)
                             |
                             |
                             |
                             |
