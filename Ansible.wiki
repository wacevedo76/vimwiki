--------------------------------------------------------------------------------
= Ansible =
--------------------------------------------------------------------------------
== Installation ==
  Extra Packages for         | yum list epel-release
  Enterpise Linux (EPLE)     |
                             |
  Primary configuration file | /etc/ansible/ansible.cfg
                             |   (this configuration file describes where the
                             |    the other config files are located)
                             |
--------------------------------------------------------------------------------
== Misc commands ==
                             |
  Running ansible plays      | ansible-playbook myplaybook.yml
                             | ansible-playbook myplaybook.yml --syntax-check
                             | ansible-playbook myplaybook.yml --list-hosts
                             | ansible-playbook myplaybook.yml --list-tasks
                             |
--------------------------------------------------------------------------------
== Ansible Architecture ==
  Ansible Inventory          | The Ansible inventory is a file or script that
                             | will provide the details about the managed nodes,
                             | including the hostname, connection methods,
                             | credentials to use and many other details
                             |
                             | It is possible to pass the inventory to Ansible
                             | using static inventory files, dynamic inventory
                             | scripts, or using the Configuration managment
                             | database (CMDB)
                             |
  Ansile Plugins             | Ansible plugins are small pieces of code that
                             | help to enable a flexible and expandable
                             | architechture.
                             |
                             | There are different types of of plugins in
                             | Ansible such as:
                             |   * Connection plugins,
                             |   * Action plugins,
                             |   * Become plugins,
                             |   * Inventory plugins
                             |
  Ansible modules            | An Ansible module is a piece of reusable and
                             | standalone script that can be used to achieve
                             | some specific tasks.
                             |
                             | An Ansible module is a piece of reusable and
                             | standalone cripts that can be used to achieve
                             | some specific taksks. Modules provide a defined
                             | interface with options to accept arguments and
                             | return information to Ansible in JSON format.
                             |
  Ansible content collections| Ansible modules are separated from the Ansible
                             | base and distributed as *Ansible content collections*
                             | or simply *Ansible Collections*
                             |
  Ansible playbook           | The Ansible playbook is a simple file written in
                             | YAML format with the instruction list of
                             | automation tasks.
                             |
                             | Example:
                             |
                             |           Playbook
                             |` ---`
                             |` - name: Enable Intranet Services            | # First play`
                             |`   hosts: node1                              |`
                             |`   become: yes                               |`
                             |`     tasks:                                  |`
                             |`     - name: Install httpd package           | #   First task`
                             |`       yum:                                  |`
                             |`         name: httpd                         |`
                             |`         state: latest                       |`
                             |`     - name: Start httpd service             | #   Second task`
                             |`         name: httpd                         |`
                             |`         enabled: true                       |`
                             |`         state: started                      |`
                             |`                                             |`
                             |` - name: Test intranet web server            | # Second play`
                             |`   hosts: localhost                          |`
                             |`   become: no                                |`
                             |`   tasks:                                    |`
                             |`     - name: connect to intranet webserver   | #   First task in second play`
                             |`       uri:                                  |`
                             |`         url: http://node1                   |`
                             |`         status_code: 200`
                             |
--------------------------------------------------------------------------------
== Documentation ==
  Built-in Ansible document- | ansible-doc -s <module name>
  ation                      |
                             |
  List all available modules | ansible-doc -l
                             |
--------------------------------------------------------------------------------
== Inventory Files ==
                             | * and ini like format to define target hosts
                             |   it is simplay a list of services
                             |
  Default inventory file     | /etc/ansible/hosts
                             |
  Grouping servers together  | * servers can be grouped together my surrounding
                             |   the group name with "[]" example:
                             |
                             | [mail]                 <-- group name
                             | server3.company.com    <-- Server under [mail]
                             | server4.company.com    <-- Server under [mail]
                             |
                             | or
                             |
                             | server[2:3].company.com  <-patters which covers
                             |                            server2 and server3
                             |
                             |
                             | [db]                   <-- group name
                             | server5.company.com    <-- Server under [db]
                             | server6.company.com    <-- Server under [db]
                             |
                             | [web]                  <-- group name
                             | server5.company.com    <-- Server under [web]
                             | server6.company.com    <-- Server under [web]
                             |
  A group of groups          | [all_servers:children] <-- group name:specify children
                             | mail                   <-- child of "all_servers"
                             | db                     <-- child of "all_servers"
                             | web                    <-- child of "all_servers"
                             |
  Inventory host aliases     | <alias>  ansible_host=<server ip or hostname>
                             |
                             | web      ansible_host=server1.conpany.com
                             | db       ansible_host=server2.company.com
                             | mail     ansible_host=server3.company.com
                             | web2     ansible_host=server4.company.com
                             |
  Define connetion type      | <alias>  ansible_host=<server ip or hostname> ansible_connection=<connection type>
                             |
                             | web      ansible_host=server1.conpany.com ansible_connection=ssh
                             | db       ansible_host=server2.company.com ansible_connection=winrm
                             | mail     ansible_host=server3.company.com ansible_connection=ssh
                             | web2     ansible_host=server4.company.com ansible_connection=winrm
                             |
  Other parameters           | * ansible_port - 22/5986
                             | * ansible_user - root/administrator
                             | * ansible_ssh_pass - Password
                             |
** Check connectivity to host| > ansible <target host name> -m ping -i <inventory file>   <-- -m for module
                             | > ansible target01 -m ping -i inventory.txt
                             |
--------------------------------------------------------------------------------
== Yaml ==
                             | <-- whitespace is used to help define structure
  Key Value Pair             | key: value  # example ->
                             | Fruit: Apple
                             | Vegetable: Carrot
                             | liquid: water
                             |
  Array / List               | <array name>:
                             | -   list_item_1
                             | -   list_item_2
                             | -   list_item_3
                             |
  Dictionary / Map           | <map name>:
                             |     key01: value01
                             |     key02: value02
                             |     key03: value03
--------------------------------------------------------------------------------
== Playbooks ==
  * Playbook - A single YAML file
    * Play - Defines a set of activities (task) to be run on hosts
      * Task - An action to be performed on the host
        > Execute a command
        > Run a script
        > Install a package
        > Shutdown / Restart
  Example playbook:

  # Simple Ansible Playbook1.yml
  -
    name: Play 1
    hosts: localhost
    tasks:
      - name: Execute command 'date'
        command: date

      - name: Execute script on server
        script: test_script.sh

      - name: Install httpd service
        yum:
          name: httpd
          state: present

      - name: Start web server
        service:
          name: httpd
          state: started
                             |
--------------------------------------------------------------------------------
  == Playbook Format ==
    Example:

      # Simple Ansible Playbook1.ymp
      -                                    <-- Defines beginning of play
        name: Play 1                       <-- Name of play
        hosts: localhost                   <-- host (local host or from Inventory file)
        tasks:                             <-- start task list
          - name: Execute command 'date'   <-- name of task
            command: date                  <-- Ansible module

          - name: Execute script on server <-- name of task
            script: test_script.sh         <-- Ansible module

      -                                    <-- Defines beginning of play
        name: Play 2                       <-- Name of play
        hosts: localhost                   <-- host (local host or from Inventory file)
        tasks:                             <-- start task list
          - name: Install httpd service    <-- name of task
            yum:                           <-- Ansible module
              name: httpd
              state: present

          - name: Start web server         <-- name of task
            service:                       <-- Ansible module
              name: httpd
              state: started
   Execute Ansible Playbook  | > ansible-playbook playbook.yml
                             |
--------------------------------------------------------------------------------
== Running Ansible commands ==
  One-offs (syntax)          | ansible <hosts> -a <command>
                             | ansible all -a "/sbin/reboot"
                             |
                             | ansible <hosts> -m <module>
                             | ansible target01 -m ping
                             |
  Playbooks                  | ansible-playbook <playbook name> -i <inventory file>
                             |
  Dry run                    | ansible-playbook <playbook name> -i <inventory file> --check
                             |
  Retry                      | If a playbook fails, a retry file is generated and
                             | contains the list of hosts where the playbook failed
                             | playbook-name.retry
                             |
                             | The file may be specificed using --limit with
                             | the same playbook to reattempt that playbook at
                             | a later time
                             |
  filter                     | Allows you to filter through setup to extract
                             | specific information (accepts regular expressions)
                             |
                             | example
                             | ansible server-02.com -m setup -a filter=*ipv4* <= returns all
                             |                                                  lines containing ipv4
--------------------------------------------------------------------------------
== Ad-hoc commands ==
  Ad-hoc command syntax      | ansible <HOSt> -b -m <MODULE> -a "<ARG1 ARG2 ARG3>"
                             |
  Important flags            | -b   => become (without argument, default is root)
                             | -m   => module
                             | -a   => Module arguments
  examples                   |
    Install softare          | ansible centos7-02 -b -m yum -a "name=httpd state=latest"
                             |   (the '-b' flag is for 'become', default state is root
                             |
    Modify service state     | ansible centos7-02 -b -m service -a "name=httpd state=started"
                             |
                             |
--------------------------------------------------------------------------------
== Modules ==
  System                     | - User
                             | - Group
                             | - Hostname
                             | - Iptables
                             | - Lvg
                             | - Lvol
                             | - Make
                             | - Mount
                             | - Ping
                             | - Timezone
                             | - Systemd
                             | - Service
                             | - setup     <- Pulls system information from tartget host (ansible facts)
                             |
  Commands                   | - Command
                             | - Expect
                             | - Raw
                             | - Script
                             | - Shell
                             |
  Files                      | - Acl
                             | - Archive
                             | - Copy
                             | - File
                             | - Find
                             | - Lineinfile
                             | - Replace
                             | - Stat
                             | - Template
                             | - Unarchive
                             |
  Database                   | - Mongodb
                             | - Mssql
                             | - Mysql
                             | - Postgresql
                             | - Proxysql
                             | - vertica
                             |
  Cloud                      | - Amazon
                             | - Atomic
                             | - Azure
                             | - Centrylink
                             | - Cloudscale
                             | - Cloudstack
                             | - Digital Ocean
                             | - Docker
                             | - Google
                             | - Linode
                             | - Openstack
                             | - Sartos
                             | - Softlayer
                             | - VMware
                             |
  Windows                    | - Win_copy
                             | - Win_command
                             | - Win_domain
                             | - Win_file
                             | - Win_iis_website
                             | - Win_msg
                             | - Win_package
                             | - Win_ping
                             | - Win_path
                             | - Win_robocopy
                             | - Win_regedit
                             | - Win_shell
                             | - Win_service
                             | - Win_user
--------------------------------------------------------------------------------
== Variables ==
  Variables are defined      | * Variable names should be letters, numbers and
  as key-value pairs         |   underscores. Tey should always start with a letter
                             |
                             | * Variables can be scoped by group, host, or
                             |   within a playbook
                             |
                             | * Variables may be passed in via command line
                             |   using the --extra-vars, the -e flag, or defined
                             |   within a playbook
                             |
                             | Examples:
                             |   ansible-playbook service.yml -e \
                             |   "target_hosts=localhost \
                             |   target_service=httpd";
                             |
                             | * Variables are referenced using double curly braces
`                             |   hosts: "{{ my_host_var }}"`
                             |
                             | # Sample Ansible Playbook1.yml
                             | -
                             |   name: Add DNS server to resolv.conf
                             |   hosts: localhost
                             |   vars:
                             |     dns_server: 10.1.250.10
                             |  tasks:
                             |     - lineinfile:
                             |         path: /etc/resolv.com
 `                            |          line: 'nameserver {{ dns_server }}'`
                             |           <-- variables are called within double brackets
                             |
  Environment variables      | If you need to set some environment variables for
                             | your remote user accoutn, you can do that by adding
                             | lines to the remote user's .bash_provile
                             |
                             | - name: Add an environment variable to the remote user's shell
                             |   lineinfile:
                             |     dest: ~/.bash_profile
                             |     regexp: '^ENV_VAR='
                             |     line: "ENV_VAR=value'
                             |
                             | - name: Get the value of the environment variable we just added
                             |   shell: 'source ~/.bash_profile && echo $ENV_VAR'              <-- environment variables can only be used by the shell module
                             |   register: foo                                                 <-- using the register option to store the variables value
                             |
                             | - name: Print the value of the environment variable
                             |   debug:
                             |     msg: "The variable is `{{ foo.stdout }}`"                   <-- using the stored register value from the previous task
                             |
                             | Linux will also read global environment variables added to /etc/environment
                             |
                             | - name: Add a global environment variable
                             |   lineinfile:
                             |     dest: /etc/environment
                             |     regexp: '^ENV_VAR='
                             |     line: "ENV_VAR=value"
                             |   become: yes
                             |
  Per-task environment vars  | You can also set the environment for just one
                             | task, using the *environment* option for that task
                             |
                             | Example:
                             | - name: Download a file, using example-prox as a proxy
                             |   get_url:
                             |     url: http://www.example.com/file.tar.gz
                             |     dest: ~/Downloads
                             |   environment:
                             |     http_proxy: http://example-proxy:80/
                             |
                             | or you can pass an environment in va a variable in
                             | via a variable in your playbooks' *vars* secont
                             |
                             | Example:
                             |
                             | vars:
                             |   proxy_vars:                  <---
                             |     http_proxy: http://example-proxy:80/
                             |     https_proxy: https://example-proxy:443/
                             |
                             | tasks:
                             | - name: Download a file, using example-proxy as a proxy
                             |   get_url:
                             |     url: http://www.example.com/file.tar.gz
                             |     dest: ~/Downloads/
                             |   environment: proxy_vars      <----
                             |
                             | If a proxy needs to be set system-wide (as is the
                             | case behind many corporate firewalls), it can be
                             | done using the global /etc/environment file
                             |
                             | Example:
                             |
                             | # In the *vars* section of the playbook (set to 'absent' to remove):
                             | proxy_state: present
                             |
                             | # In the 'tasks' secon of the playbook:
                             | - name: Configure the proxy
                             |   inlinfile:
                             |     dest: /ect/environment
                             |     `regexp: "{{ item.regexp }}"`
                             |     `line: "{{ item.line }}"`
                             |     `state: "{{ proxy_state }}"`
                             |   with_items:
                             |     - regexp: "^http_proxy="
                             |       line: "http_proxy=http://example-proxy:80/"
                             |     - regexp: "^https_proxy="
                             |       line: "https_proxy=https://example-proxy:443/"
                             |     - regexp: "^ftp_proxy="
                             |       line: "ftp_proxy=http://example-proxy:80/"
                             |
--------------------------------------------------------------------------------
== Loops ==
                             | # Sample Ansible Playbook1.yml
                             | -
                             |   name: Install Packages
                             |   host: localhost
                             |   tasks:
                             |     - yum: name=http       state=present
   --> looping key word      |       with_items:
                             |           - httpd
                             |           - binutils
                             |           - glibc
                             |           - ksh
                             |           - libaio
                             |           - libXext
                             |           - gcc
                             |           - make
                             |           - sysstat
                             |           - unixODBC
                             |           - mongodb
                             |           - nodejs
                             |           - grunt
                             |
--------------------------------------------------------------------------------
== Roles ==
  An Ansible role is a collection of tasks, handlers, templates, and variables
  for configuring the target system so that it meets the desired state.
  Sample File Structure:
    Defaults/main.yml        | This contains variables for the rol that can be
                             | overwritten when the role is used
                             |
    tasks/main.yml           | This containes the main list of tasks to be
                             | executed when using the role.
                             |
    vars/main.yml            | This containes internal variables for the role.
                             |
    files                    | This contains static files that can be referenced
                             | from this role.
                             |
    templates                | This is the jinja2 templates that can be used via
                             | this role.
                             |
    Handlers/main.yml        | This contains the handler definitions
                             |
    meta/main.yml            | This defines some metadata for this role, such as
                             | the author, license, platform, and dependencies
                             |
    tests                    | This is an inventory. test.yml file that can be
                             | used to ttest this role
                             |
  used to modularize         | # Sample Ansible Playbook1.ym
  playbooks                  | -
                             |   name: Set Firewall Configuration
                             |   hosts: web
  include variables file     |   vars_files:
                             |     - varibles.yml
                             |   tasks:
  all other includes ->      |     - include: tasks.yml
                             |
Roles best practices         |
  lets look a a possible file structure:
                             |
  - Ansible Project          | # Sample Ansible setup_application.yml
    * inventory.txt          | -
    * setup_application.yml  |   name: Set Firewall Configurations
    - roles                  |   hosts: web
      - webservers           |   roles:
        - files              |       - webservers
        - templates          |
        - tasks              |------------------------------------------------
        - handlers           | by seting the role "webservers"
        - vars               | all relevant files including tasks and vars
        - defaults           | in the "webservers" directory will be automatically
        - mets               | loaded
                             |
--------------------------------------------------------------------------------
== Debugging ==
  *debug*                    | The debug module may be used to help troubleshoot
                             | plays:
                             |   * use to print detail information about in-progress
                             |     plays
                             |   * Handy for troubleshooting
                             |
                             | *debug* takes two primary parameters that are
                             | mutually exclusive:
                             |   * msg: A message that is printed to STDOUT
                             |   * var: A variable whose content is printed
                             |     to STDOUT
                             |
                             | Example:
                             | - debug:
                             |     msg: "System `{{ inventory_hostname }}`
                             | has uuid `{{ ansible_product_uuid }}"`
                             |
  *register*                 | The *register* module is used to store task output
                             |
                             | Several attributes are avaiable: return code,
                             | stderr, and stdout.
                             |
                             | The following play will store the results of the
                             | shell module in a variable named *motd_contents*:
                             | - hosts: all
                             |   tasks:
                             |   - shell: cat /etc/motd
                             |     register: motd_contents
                             |
--------------------------------------------------------------------------------
== Handlers ==
  Handlers                   | Ansible provides a mechanism that allows an action
                             | to be flagged for execution when a task performs a
                             | change
                             |
                             | By only executing certain tasks during a change,
                             | plays are more efficient.
                             |
                             | This mechanism is known as a *handler* in Ansible
                             |
                             | A handler may be defined similarly to tasks:
                             | handlers:
                             | - name: restart memcached
                             |   service:
                             |     name: memcached
                             |     state: restarted
                             |   listen: "restart chae services""
                             |
                             | A handler may be called using the *notify* keyword:
                             | - name: template configuration file
                             |   template:
                             |     src: foo.conf
                             |     dest: /etc/foo.conf
                             |   notify:                        <-- Handler caller
                             |   - restart memcached            <-- must be the same name
                             |   - restart someotherservice     <-- can be used to call multiple handers
                             |
                             | No matter how many times a handler is flagged in a
                             | play, it only runs during a play's final phase.
                             |
                             | *notify* will only flag a handler if a task block
                             | makes changes.
                             |
--------------------------------------------------------------------------------
== Jinja ==
  With Conditionals          | when
                             | changed_when
                             | faile_when
                             |
      Literals               | * Strings: 'string'
                             | * integers: 42
                             | * floats: 42.33
                             | * lists: [1, 2, 3]
                             | * dictionaries: {key: value, key2, value2}
                             | * booleans: true, false
                             |
      Math operations        | addition, subtraction, multiplication and division
      Comparisons            | ==, != >=, <=
      Logicat operators      | and, or, not
                             |
      Examples: true         | 1 in [1, 2, 3]
                             | 'see' in 'Can you see me'
                             | foo != bar
                             | (1 < 2) and ('a' not in 'best')
                             |
      Examples: false        | 4 in [1, 2, 3]
                             | foo == bar
                             | (foo != foo) or (a in [1, 2, 3])
                             |
      Other checks           | *undefined* (the opposite of *defined*)
                             | *equalto* (works like ==)
                             | *even*
                             | *iterable* (if you can iterate over the object)
                             |
  register                   | Any play can 'register' a variable, and once
                             | registered, that variable will be available to
                             | all subsequent tasks
                             |
                             | Many times, you may need to output (stdout or stderr)
                             | of a shell command, and you can get that in a
                             | variable using the following syntax:
                             |
                             | - shell: my_command_here
                             |   register: my_command_result
                             |
                             | You can now access stdout (as a string) with
                             | *my_command_result.stout* and *my_command_result.stderr*
                             |
  when                       | *when* is even more powerful if used in conjunction
                             | with variables registered by previous tasks. As an
                             | example, we want to check the status of a running
                             | application and run a play only when that app
                             | reporst it is 'ready' in its output:
                             |
                             | - command: my-app --status
                             |   regester: myapp_result
                             |
                             | - command: do-something-to-my-app
                             |   when: "'ready' in myapp_result.stdout"
                             |
--------------------------------------------------------------------------------
