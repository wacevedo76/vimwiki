--------------------------------------------------------------------------------
= Python notes =
--------------------------------------------------------------------------------
== Notes from Automate the Boring Stuff ==
--------------------------------------------------------------------------------
=== Bult-in Function === 
    Modules                  |
      import statement       | import <module>
        must used full module| import random
        name in function call|
                             |
      import from statement  | from <module> import <function>
        can now use bare     | from random import *
        function call        |
                             |
  Terminating a function call| import sys 
  early                      | sys.exit()
--------------------------------------------------------------------------------
=== exception handling ===
  try / except block         | try:
                             |     <some block of code
                             | except <some type of error>:
                             |    <block of code which is run when error occurs>
                             |
                             | (Grab the exception from the error msg)
--------------------------------------------------------------------------------
=== List functions ===
  list()                     | list('hello') -> ['h','e','l','l','o']
                             |
                             | list.index(<element>)
                             | list.append(<element>)
                             | list.remove(<element>)
                             | list.sort() | (reverse=True), (key=str.lower)
                             |
                             | list.reverse()
                             |
  Search for an item in list | '<value>' in <list>  --> returns boolean
                             | '<value>' not in <list>  --> returns boolean
                             |
  enumerate()                | Enumerate will iterate over an iterable and return
                             | two values on each iteration, the index of the 
                             | item and the 
                             |
                             | for index, item in enumerate(supplies)
                             |
  random                     | import random
                             | random.choice([])
                             | random.shuffle([])
                             |
  copy                       | import copy
    newList = list           |
    does not make a new list | newList = copy.copy(originalList)
    it only makes a reference| newList = copy.deepcopy(originalList)
    to the original list     |     (use deepcopy if origianl list has lists)
                             |
--------------------------------------------------------------------------------
=== Dictionary Methods ===
  Keys, values, items        | {}.keys()
  These return types, while  | {}.values()
  not actually arrays, can   | {}.items
  be used in loops           |
                             |
                             | for k in spam.keys()
                             | for i in spam.items() --> ('key', 'value')
                             | for k, v in spam.itmes()
                             |
  Checking whether a key or  | 'name' in spam.keys()
  value exists in dictionary | 'william' in spam.values()
  returns boolean value      |
                             |
  Get()                      | picnicItems = {'apples': 5, 'cups': 2}
    Checks to see if a key   | picnicItems.get('cups'; 0)   --> returns the number of cups or 0
    exists, returns the      |
    value or an fallback     |
                             |
  Setdefault                 | spame.setdefault('color', 'black')
    Sets a default value for |
    key which is called but  |
    does not already exist   |
                             |
--------------------------------------------------------------------------------
=== String Methods ===
  join                       | ', '.join(['cats', 'rats','bats'])
  split                      | 'test one two three'.split()
                             |
--------------------------------------------------------------------------------
=== Reading and Writing files ===
Modules: pathlib, os
  Createing paths            | from pathlib import Path
    pathlib module           | Path('spam', 'bacon', 'eggs')
                             |    *nix --> spam/bacon/eggs
                             |    Windows --> 'spam\\bacon\\eggs'
                             |
                             | myFiles = ['file01', 'file02', 'file03']
                             | for file in myFiles:
                             |     print(Path(r'C:\Users\A1', file'))
                             |
  Joining paths with /       | Path('spam') / Path('bacon', 'egs')
                             |
  Current working directory  | Path.cwd()
                             |
  Change working directory   | import os
                             | os.chdir('/home/<use name>/documents')
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
--------------------------------------------------------------------------------
== General Notes ==
--------------------------------------------------------------------------------
=== General Class construction ===
                             | class Employee:
                             |    def __init__(self, name, age):
                             |      self.name = name
                             |      self.age = age
                             |      self.hours_worked = 0
                             |
                             |    def add_hourse(self, hours):
                             |      self.hours_worked += hours
                             |
