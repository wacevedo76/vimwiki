--------------------------------------------------------------------------------
= Python notes =
  * [[AtBS]]
--------------------------------------------------------------------------------
== Notes from Automate the Boring Stuff ==
--------------------------------------------------------------------------------
=== Bult-in Function === 
    Modules                  |
      import statement       | import <module>
        must used full module| import random
        name in function call|
                             |
      import from statement  | from <module> import <function>
        can now use bare     | from random import *
        function call        |
                             |
  Terminating a function call| import sys 
  early                      | sys.exit()
--------------------------------------------------------------------------------
=== exception handling ===
  try / except block         | try:
                             |     <some block of code
                             | except <some type of error>:
                             |    <block of code which is run when error occurs>
                             |
                             | (Grab the exception from the error msg)
--------------------------------------------------------------------------------
=== List functions ===
  list()                     | list('hello') -> ['h','e','l','l','o']
                             |
                             | list.index(<element>) <-- can take a start index
                             |                        as second argument
                             | list.count(value) <-- returns the number of times
                             |                    a value occurs in list
                             | list.append(<element>) <-- adds 1 item to lists end
                             | list.extend([<list>]) <-- adds multi items to end
                             | list.insert(index, item)
                             | list.clear() <--  removes ALL items from list
                             | list.pop() <-- default, removes the last elemnt
                             |                can add index as first argument
                             | list.remove(<element>)
                             | list.sort() | (reverse=True), (key=str.lower)
                             |
                             | list.reverse()
                             |
  Search for an item in list | '<value>' in <list>  --> returns boolean
                             | '<value>' not in <list>  --> returns boolean
                             |
  enumerate()                | Enumerate will iterate over an iterable and return
                             | two values on each iteration, the index of the 
                             | item and the 
                             |
                             | for index, item in enumerate(supplies)
                             |
  random                     | import random
                             | random.choice([])
                             | random.shuffle([])
                             |
  copy                       | import copy
    newList = list           |
    does not make a new list | newList = copy.copy(originalList)
    it only makes a reference| newList = copy.deepcopy(originalList)
    to the original list     |     (use deepcopy if origianl list has lists)
                             |
--------------------------------------------------------------------------------
=== Dictionary Methods ===
  Keys, values, items        | {}.keys()
  These return types, while  | {}.values()
  not actually arrays, can   | {}.items
  be used in loops           |
                             |
                             | for k in spam.keys()
                             | for i in spam.items() --> ('key', 'value')
                             | for k, v in spam.itmes()
                             |
  Checking whether a key or  | 'name' in spam.keys()
  value exists in dictionary | 'william' in spam.values()
  returns boolean value      |
                             |
  Get()                      | picnicItems = {'apples': 5, 'cups': 2}
    Checks to see if a key   | picnicItems.get('cups'; 0)   --> returns the number of cups or 0
    exists, returns the      |
    value or an fallback     |
                             |
  Setdefault                 | spame.setdefault('color', 'black')
    Sets a default value for |
    key which is called but  |
    does not already exist   |
                             |
--------------------------------------------------------------------------------
=== String Methods ===
  convert to string          | str(value)
                             |
  join                       | ', '.join(['cats', 'rats','bats'])
  split                      | 'test one two three'.split()
                             |
--------------------------------------------------------------------------------
=== Reading and Writing files ===
Modules: pathlib, os
  pathlib Module             | returns a Path object
                             |
                             | the path module is primarily used to form paths 
                             | that translate between windows and linux file systems
                             |
  Createing paths            | from pathlib import Path
    pathlib module           | Path('spam', 'bacon', 'eggs')
                             |    *nix --> spam/bacon/eggs
                             |    Windows --> 'spam\\bacon\\eggs'
                             |
                             | myFiles = ['file01', 'file02', 'file03']
                             | for file in myFiles:
                             |     print(Path(r'C:\Users\A1', file'))
                             |
  Joining paths with /       | Path('spam') / Path('bacon', 'egs')
                             |
  Current working directory  | Path.cwd()
                             |
  Get path object of home    | Path.home()
  directory                  |
                             |
  Is the path absolute       | Path.cwd().is_absolute --> True
                             | Path('spam/bacon/eggs').is_absolute --> False
                             |
  Get the parts of a path    | PathObject.drive
                             | PathObject.anchor
                             | PathObject.parent
                             | PathObject.name
                             | PathObject.stem
                             | PathObject.suffix
                             | 
  Get                        | 
                             | 
os Module                    | returns a string
                             |
  Change working directory   | import os
                             | os.chdir('/home/<use name>/documents')
                             |
  Create new directory       | os.makedirs('/path/to/new/directory')
                             |
  get list of files in a     | os.listdir(path)
  directory                  |
                             |
  return the absolute path   | os.path.abspath(<path>)
                             |
  is the path Absolute?      | os.path.isabs(<path>)
                             |
  will return the relative   | os.path.relpath(<path>,<start>) 
  path                       |
                             |
  Opening files              | fileHandler = open(<path to file>) --> default (read mode)
                             | fileHandler = open(<path to file>, 'r') --> (read mode)
                             |
                             | fileHandler = open(<path to file>, 'w') --> (write mode)
                             | fileHandler = open(<path to file>, 'a') --> (append mode)
                             |
  Reading content            |
    Returns a single large   | fileContent = fileHandler.read()
    string                   |
                             |
    Returns a list of strings| fileContent = fileHandler.readlines()
                             |
  Writing to files           | 
    the fileHandler must've  | fileHandler.write(<text content)
    already been opened in   |
    write or append mode     |
                             |
    closing fileHandler      | fileHandler.close()
                             |
  Errors with writing to     |
    PermissionError:         |
                             |
                             |
                             |
--------------------------------------------------------------------------------
== Working with Excel Spreadsheets ==
--------------------------------------------------------------------------------
  needed 3rd party module    | openpyxl
                             |
                             |
                             |
                             |
--------------------------------------------------------------------------------
= Modern Python 3 Notes =
--------------------------------------------------------------------------------
  Data types
    None (null)              | None  <-- (case sensitive) - (class 'NoneType')
  String interpolation
    format strings (f-string)| f'interpolated data --> {variable/expression}'
                             |
    format method            | 'interpolated data --> {}'.format(<value>)
                             |
  Logical Operators
    and                      |
    or                       |
    not                      |
--------------------------------------------------------------------------------
== General Notes ==
--------------------------------------------------------------------------------
  ord()                      | returns the numerical value of a letter
                             | ord('a') --> 97
                             |
  chr()                      | returns the letter value of a number
                             | char(97) --> 'a'
--------------------------------------------------------------------------------
=== General Class construction ===
                             | class Employee:
                             |    def __init__(self, name, age):
                             |      self.name = name
                             |      self.age = age
                             |      self.hours_worked = 0
                             |
                             |    def add_hourse(self, hours):
                             |      self.hours_worked += hours
                             |
--------------------------------------------------------------------------------
=== Creating a new virtual environment ===
venv                         | python3 -m venv <new project>
                             | venv will create a few new directories
                             |   bin/ - python scripts and new executalbes by other 
                             |          packages
                             |   lib/ 
                             |   inclued/
                             |   New packages will be installed in:
                             |     <new project>/lib/pythonx.y/site-packages/
                             |
  Activate new environment   | source <new project>/bin/activate
                             |
  Deactivate new environment | deactivate
                             |
  requirements.txt           | virtual environments are not portable, so it is 
                             | common practice to provied a requirements file
                             | which facilitates recreating the same environment 
                             | within different developent environments/machines
                             | an example file would look lik this
                             |     # lines followed by hast (#) are treated as comments
                             |
                             |     # Strict version names are bes tfor reproducibility
                             |     eventlet==0.17.4
                             |     graceflu--0.1.1
                             |
                             |     # for project that are well tested with different
                             |     # dependency version the relative version specifiers
                             |     # are acceptable too
                             |     falcon>=0.3.0,<0.5.0
                             |    
                             |     # packages withoutversion should be avoided unless
                             |     # latest release is always requred/desired
                             |     pytz
                             |
  Installing enviornment     | pip install -r requirements.txt 
  with pip                   |
                             |
-----------------------------|
                             | virtualenv <name>
                             |
                             |
