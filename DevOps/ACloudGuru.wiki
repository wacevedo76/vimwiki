--------------------------------------------------------------------------------
= acloudguru DevOps path Notes =
--------------------------------------------------------------------------------
Defining DevOps
  DevOps                     | = Dev (Development) + Ops (Operations)
                             |
                             | Different people define DevOps in a variety of ways.
                             |
                             | This definition from Wikipedia is a good starting point
                             |
                             |   "DevOps is a software engineering culture and practice
                             |   aims at unifying software development and software
                             |   operations
                             |
                             |   DevOps aims at shorter development cycles, increased
                             |   deployment frequency, and more dependable releases,
                             |   in close alignment with busines objectives
                             |
--------------------------------------------------------------------------------
Brief History of DevOps      |
  Agile Software Development | * DevOps grew out of the Agile software development
                             |   movement
                             | * Agile seeks to develop software in small,
                             |   frequent cycles in order to deliver
                             |   functionality to customers quickly andquickly
                             |   respond to chaning busin
                             |
                             | * DevOps and Agile often go hand-in-hand
                             |
  The Timeline of DevOps     | * 2007: Agile software development was gaining
                             |   popularity, but it was also suffering from a
                             |   growing divide between development and operations
                             |
                             | * 2007: Patrick Debois, an enginner with experience
                             |   doing both dev and ops, was doing testing on a
                             |   project and became frustrated by the huge divide
                             |   between dev and ops
                             |
                             | * 2008: Patrick Debois and Andrew Shafer met at the
                             |   Agile2008 Conference in Toronto, Canada. They
                             |   began to start conversations and seek others
                             |   interesten bridging the divide between dev and ops
                             |
                             | * June 23, 2009: John Allspawn and Paul Hammond gave
                             |   a talk to Velocity Conference: "10+ Deploys Per
                             |   Day: Dev and Ops Cooperation at Flickr." Patrick
                             |   was watching vial livestream. People began discussing
                             |   it via twiter.
                             |
                             | * October 30-31 2009: Patrick hosted the first DevOpsDays
                             |   in Ghent, Belgium; a conference for both devs and
                             |   ops engineers. The conversation continued on
                             |   Twitter:#devops
                             |
                             |
                             | * DevOps grew into an organic, grassroots movement
                             |   all over the world and spawned many tools to
                             |   support the practices valued by DevOps
                             |
--------------------------------------------------------------------------------
Devops Essentials
  The Goals of DevOps        | Devops cultures is about collaboration between Dev and Ops
                             |
                             | Under the traditional separations between Dev and Ops
                             |   , Dev and Ops have different and opposing goals.
                             |
                             | * Development -> speed
                             | * Operations  -> Stability
                             |
                             | However, in a devOps culture
                             |   * Dev and Ops are playing on the same team
                             |   * Devn and Ops share the same goals
                             |
                             | These goals include things like:
                             |   * Fast time-to-market (TTM)
                             |   * Few production failures
                             |   * Immediae recovery from failures
                             |
                             | DevOps is a Dev and Ops working together.
                             |
--------------------------------------------------------------------------------
Devops Essentials
  Why do build automation    | * Build automation is fast - Automation handles
                             |   tasks that would otherwis need to be done manually.
                             |
                             | * Build automation is consistent - The build happens
                             |   the same way every time, removing problems and
                             |   confusion that can happen with manual builds.
                             |
                             | * Buld automation is repeatable - The build can
                             |   be done multiple times with the same result.
                             |   Any version of the source code can always be
                             |   transformed into deployable code in a consistent way.
                             |
                             | * Buld automation is portable - The buld can be done
                             |   the same way on any machine. Anyone on the team
                             |   cab build on their macine, as well as on a shared
                             |   build server. Building code doesn't depend on specific
                             |   people or machines
                             |
                             | * Build automation is more reliable - There will be
                             |   fewer problems caused by bad builds
                             |
  What is Continuous         | * Continuous Intergration(CI): the practive of frequently
  Integration?               |   merging code changes done by developers
                             |
                             | * Traditionally, developers would worl separately, perhaps
                             |   for weeks at a time, and then merge all of their
                             |   work together at the end in one large effort
                             |
                             | * Continuous integration mens merging constantly throughout
                             |   the day, usually with the execution of automated
                             |   tests to detect any problems caused by the merge
                             |
                             | * Merging all the time could be a lot of work, so
                             |   to avoid that it should be automated
                             |
  What does Continuous       | * Continuous integration is ususally done with the
  Itegration look like?      |   help of a CI server
                             |
                             | * When a developer commits a code change, the CI
                             |   server sees the change and automatically performs
                             |   a build, also executing automated tests.
                             |
                             | * The occurs multiple times a day.
                             |
                             | * If ther eis any problem with the build, the CI
                             |   server immediately and automatically notifies the
                             |   developers.
                             |
                             | * If anyone commits code that "breaks the build"
                             |   they are responsible for fixing the problem or
                             |   rolling back their changes immediately so that
                             |   other developers can continue working.
                             |
  Why do Continuous          | * Early detection of certain types of bugs - if
                             |   code doesn't compile or an automated test fails,
                             |   the developers are notified and can fix it and
                             |   can fix it immediately. The sooner these bugs
                             |   are detected, the easier tey are to fix?
                             |
                             | * Eliminate the scrable to integrate just before
                             |   a big release - The code is constantly merged,
                             |   so there is no need to do a big merge at the end
                             |
                             | * Makes frequet releases possible - Code is always
                             |   in a stat that can be deplolyed to production
                             |
                             | * Makes continuous testing possible - Sinse the
                             |   code can always be run, QA testers can get their
                             |   hads on it all throughout the development process
                             |   not just at the end
                             |
                             | * Encourages good coding practice - Frequent commits
                             |   encourages simple, modular code.
                             |
--------------------------------------------------------------------------------
Continuous Delivery and Continuous Deployment
  What is Continuous Delivery| * Continuous Delivery (CD): the practice of
                             |   continuously maintaining code in a deployable
                             |   state
                             |
                             | * Regardless of whether or not the decision is
                             |   made to deploy, the code is always in a state
                             |   that is able to be deployed
                             |
                             | * Some use the terms continuous delivery and
                             |   continuous deployment interchangeably, o
                             |   or simply use the abbreviation CD
                             |
  What is Continuous         | * Continuous Deployment: the practice of frequently
  Deployment                 |   deploying small code changes to production
                             |
                             | * Continuous delivery is keeping the coe in a
                             |   deployable state. Continuous deployment is
                             |   actually doing the deployment frequently
                             |
                             | * Some companies that do continuous deployment
                             |   deploy to production multiple times a day
                             |
                             | * There is no standard for how often you should
                             |   deploy, but in general the more foten you
                             |   deploy the better!
                             |
                             | * With continuous deployment, deployments to
                             |   production are routine and commonplace.
                             |   They are not a big, scary event
                             |
--------------------------------------------------------------------------------
== DevOps Tools ==
  Some of the most popular   | Source for learning about DevOps tools
  Tools                      | https:/xebialabs.com/periodic-table-of-devops-tools/
                             |
  Build Automation Tools     | * Build automation - Automated processing of code
                             |   in preparation for deployment
                             |
                             | * What tools you use for build automation usually
                             |   depends on programming language and frameworks
                             |
                             | A few examples:
                             |   * Java - ant, maven, gradle
                             |   * Javascript - npm, grunt, gulp
                             |   * Make - widely used in Unix-based systems
                             |   * Packer - build machine images and containers
                             |
  Continuous Integration     | * Continuous Integration - Continuously merging
  Tools                      |   code into a single branch or mainline
                             |
                             | * Continuous Integration tools usually consist
                             |   of a server that integrates with source control
                             |
                             | * When source code is changed, the server responds
                             |   by executing an automated build
                             |
                    Jenkins: | * Open Source - fork of Hudson
                             |
                             | * Widely used
                             |
                             | * Java servlet-based
                             |
                   TravisCI: | * Open Source
                             |
                             | * Built around Github integration
                             |
                             | * Executes builds in clean VMs
                             |
                     Bamboo: | * Enterprise product by Atlassian
                             |
                             | * Out-of-the-box integration with otherAtlassian
                             |   products like JIRA and Confluence
                             |
--------------------------------------------------------------------------------
== Tools for Configuration Management ==
  Configuration Management   | * Configuration Management - Managing and changing
  Tools                      |   the state of pieces of infrastructure in a
                             |   consistent and maintainable way
                             |
                             | * Configuration management tols are a great way |
                             |   to implement infrastructure as code
                             |
                    Ansible: | * Open source
                             |
                             | * Declarative configuration
                             |
                             | * YAML configuration files
                             |
                             | * No control server needed - but Ansible tower
                             |   is available
                             |
                             | * No agents needed, just python and ssh
                             |
                    Puppet:  | * Declarative configuration
                             |
                             | * Manage state through a UI
                             |
                             | * Custom modules use Puppet DSL
                             |
                             | * Pushes changes to clients using a control
                             |   server and agents installed on clients
                             |
                       Chef: | * Procedural configuration
                             |
                             | * Agent/server
                             |
                             | * Uses Chef DSL
                             |
                       Salt: | * Declarative configuration
                             |
                             | * Agent (Minions)/server (master) - but can support agentless
                             |
                             | * Uses YAML
                             |
                             | * Support for event-driven automation
                             |
--------------------------------------------------------------------------------
== Tools for Virtualization and Containerization ==
  Virtualization Tools       | * Virtualization - Managing resource by creating
                             |   virtual machines rather than physical machines
                             |
                             | * Hypervisor - Runs on bare metal and manages
                             |   virtual machines (VMs)
                             |
                             | * Examples:
                             |
                             |   * VMWare ESX and ESXi
                             |
                             |   * Microsoft Hyper-V
                             |
                             |   * Citrix XenServer
                             |
  Containerization           | * Containers - Lightweight, isolated packages
                             |   containing everything needed to run a piece of
                             |   software
                             |
                             | * require fewer resources than VMs - VMs contain
                             |   and entire OS plus virtual versions of all
                             |   hardware
                             |
                             | * Containers have the bare minimum needed to run
                             |   the software
                             |
                             | * Docker - Docker is currently the leading container
                             |   technology
                             |
                             | * Containers are still relatively new but very
                             |   useful for DevOps!
                             |
--------------------------------------------------------------------------------
== Tools for Monitoring ==
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
