--------------------------------------------------------------------------------
= AtBS =
--------------------------------------------------------------------------------
== Chapter 7 ==
  * this notes make the assumtion that the reader has a sold understanding of
    the basics of regular expressions
    
  import re                  | to use regex, you must first import the library
                             |
  re.compile(r'<pattern>')   | the compile method is used to create a regex object
                             | (a raw string must be used)
                             |
                             | groupings with parentheses can be used (thus the 
                             | need for raw strings).
                             |
  reObject.serch('<str>')    | the regex object's search method will return 'none'
                             | if no match is found, or a 'match' object if a 
                             | a pattern is found
                             |
  matchObject.group()        | if no groupings are used, the group() the matchObject,
                             | returned by the search method from a regexObject 
                             | will return the actual text of search.
                             | otherwise, you can use you can return he specific
                             | individual groups with .group(1) ....
                             |
  .group(0)                  | .group(0) will return the entire mached search
  .groups()                  | .groups() will return all the groups as a tuple
                             |
                             |
  characters with special    | . ^ $ * + ? { } \ | ( ) 
  meaning (must be escaped   |
  to be part of the search   |
  string)                    |
                             |
  .findall()                 | * using a "|" can be used to match multiple expressions
                             | * by default, group() will just return the first match
                             |   use .findall() will: 
                             |     * return a list of strings if there are no groups
                             |     * return a list of tuples if there are groups
                             |
  re.compile('.*',re.DOTALL) | By default, '.*' will return everything EXCEPT newline
                             | characters... re.DOTALL will return everythin INCLUDING
                             | newline characters
                             |
  re.compile('.*',           | this will make the serch CASE INSENSITIVE
    re.IGNORECASE)           |
                             |
  reObject.sub(sub, 'string')| with the sub() method of the regexObject, the "sub" 
                             | attribute replace all maches in the given string
                             |
  reOb.sub(patt, re.VERBOSE) | Verbose allows the pattern to ignore white space
                             | and comments.... for example:
                             | --------------------------------------------------
                             | phoneReex = recompile(r'''(
                             |     (\d{3}|\d{d}\))?              # area code
                             |     (\s|-|\.)?                    # separator
                             |     \d{3}                         # first 3 digits
                             |     (\s|-|\.)?                    # separator
                             |     \d{4}                         # last 4 digits
                             |     (\s*(ext|x|ext.)\s*\d{2,5})?  # extension
                             |     )''', re.VERBOSE)
                             | --------------------------------------------------
  re.IGNORECASE, DOTALL      |
     VERBOSE and "|"         | these arguments can be used together if seperated
                             | by '|'
                             | re.compile('foo', re.IGNORECASE | re.DOTALL | re.VERBOSE)
--------------------------------------------------------------------------------
== Chapter 9 ==
  file path separator        | from pathlib import Path
  (Windows \, Unix /)        | Path('Documents', 'Testfiles', 'exeFiles')
                             |   WindowsPath('Documents/Testfiles/exeFiles')
  Path() returns an          | str(Path('Documents', 'Testfiles', 'exeFiles))
  PathObject                 |   'Documents\\Testfiles\\exefiles'
                             |
                             | *Use Case*
                             |  ------------------------------------------------
                             |  >>> From pathlib import Path
                             |  >>> myFiles = ['accounts.txt', 'details.csv', 'invite.docx']
                             |  >>> for filename in myFiles:
                             |          print(Path(r'C:\Users\A1', filename))
                             |
                             |  C:\Users\A1\accounts.txt
                             |  C:\Users\A1\details.csv
                             |  C:\Users\A1\invite.docx
                             |  ------------------------------------------------
                             |
  Concatinate PathObjects    |
    with '/'                 |
                             |
  The 'os' libraray          |
    get absolute path        | os.path.abspath('.')
    of cwd                   |
                             |
Reading and writing with     |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
                             |
