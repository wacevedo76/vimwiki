-----------------------------------------------------------------------
= Go(lang) Notes =
-----------------------------------------------------------------------
== History and features ==
  It is a compiled, statically typesd language in the tradition of Algo
  and C, with garbage collection, limited structual typing, memory 
  safty features and CSP-syle concurrent programming features added.

  The compiler & other language tools originally developed by Google
  are all free and open source.

  Go takes a stong position on features that can lead to confusion and 
  bugs. It omits OOP idiom such as inheritance and polymorphism, in 
  favor of composition and simple interfaces. It downplays exception 
  handling in favor of explicit erros in return values. There is exactly
  one correct way to lay out Go code, enfoced by the gofmt tool.

  Go is also a great language for writing concurrent programs: programs
  with many independently running parts. An obvious example is a
  webserver: Every request runs separately, but requests often need to
  resources suce as sessions, caches, or notification queues. This 
  means skilled Go programmers need to deal with concurrent access to 
  those resources.

  While the Go language has an excellent set of low-level features for
  handling concurrency, using them directly can become complicated. In
  many cases, a hadful of reusable abstractions over theose low-level 
  mechanisms make like much easier.

  Programs are constructed using packages, for efficient management of
  dependencies. Go programming implementations use a traditional compile
  and link model to generate executable binaries.

  Features excluded Intentionally
    * Support for type inheritance
    * Support for method or operator overloading
    * support for circular dependencies among packages
    * support for pointer arithmetic
    * Support for assertions
    * Support for generic programming
-----------------------------------------------------------------------
== Go CLI ==
  go build                   | Compiles a bunch of go source code files
                             |
  go run                     | Compiles and executes one or two files
                             |
  go fmt                     | Formats all the code in each file  in the 
                             | current directori
                             |
  go intall                  | Compiles and "installs" a package.
                             |
  go get                     | Downloads the raw source code of somone 
                             | elses package
                             |
  go test                    | Runs any tests associated with the current
                             | project
-----------------------------------------------------------------------
== Go Packages ==
  There are two types of     | Exacutable (package)
  packages in any given go   | - Generates a file that we can run
  project                    |
                             | Reusable (package)
                             | - Code used as 'helpers'. good place to put
                             |   reusable logic (code dependencise/libraries).
-----------------------------------------------------------------------
(Go Packages) :Summary
  A package declaration can be included at the top of any Golang source
  code Doing so will define the type of packages the source code in 
  questions compiles as. Unless the package name given to the the soure
  code is "Main", the package will compile as a Reusable package.  NOTE:
  if the package "main" is used, indicating that the source code is meant
  to be used to produce and executable file, a "main" function must exist
  in the source code. 
  
  ASSUMTIONS: The "main" package is an entry point for the project
-----------------------------------------------------------------------
== Go Basic Types ==
  bool                       |
  string                     |
  int                        |
  float64                    |
                             |
  Variable declaration       | var card string = "Ace of Spades"
  Var declareation shortcut  | cart := "Ace of spades"  <-- only used in var declaration
    The ":=" operator allows |
    the Go compiler to       |
    infer its type based     |
    on the value supplied in |
    the var declaration      |
-----------------------------------------------------------------------
== Function Return types == 
  When defining a function   | func newCard() string {    <-- define type after parameters
  you must define the type   |
  the function returns       | {
                             |
                             |
                             |
                             |
                             |
                             |
